name: CI Minikube Workload Only

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:   # bisa run manual juga

jobs:
  build-job:
    runs-on: ubuntu-latest
    name: Build image di Minikube
    steps:
      - name: Checkout current PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Test cluster up
        run: kubectl get nodes -o wide

      - name: Clone repo berisi manifest
        run: git clone https://github.com/Satriaaa16/Kubernetes-tutorial.git

      - name: Build image
        run: |
          cd Kubernetes-tutorial
          minikube image build -t local/devex:v1 .

  deploy-job:
    runs-on: ubuntu-latest
    name: Deploy workloads + ConfigMap ke Minikube
    needs: build-job   # job ini nunggu build-job selesai
    steps:
      - name: Checkout current PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Clone repo berisi manifest
        run: git clone https://github.com/Satriaaa16/Kubernetes-tutorial.git

      - name: Install yq (YAML processor)
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Buat namespace monitoring & devops
        run: |
          kubectl create ns monitoring || true
          kubectl create ns devops || true

      - name: Deploy workload + ConfigMap (skip template dir)
        run: |
          for file in $(find Kubernetes-tutorial/ -type f \( -name "*.yaml" -o -name "*.yml" \) ! -path "*/belajar/template/*"); do
            echo "ðŸ”Ž Checking $file"
            yq e 'select(.kind == "Deployment" or 
                         .kind == "StatefulSet" or 
                         .kind == "DaemonSet" or 
                         .kind == "Job" or 
                         .kind == "CronJob" or 
                         .kind == "ReplicaSet" or 
                         .kind == "ConfigMap")' "$file" 2>/dev/null | \
            kubectl apply -f - || true
          done

      - name: Tunggu workload siap (max 60s)
        run: |
          kubectl wait --for=condition=available deployment --all --all-namespaces --timeout=60s || true
          kubectl wait --for=condition=ready pod --all --all-namespaces --timeout=60s || true
          kubectl get all --all-namespaces

  testing-job:
    run-on: ubuntu-latest
    needs: deploy-job
    steps: 
      - name: masuk pod
        run: |
           kubectl top pod
           kubectl top node
